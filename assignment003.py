# -*- coding: utf-8 -*-
"""Assignment003.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HZBD4VnZKXRHnFJ_pI7ODlhSjM3v0YCp
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data = pd.read_csv("/content/loan_dataset.csv")

data

data.head()

data.shape

data.columns

data.isna().sum()

data.info()

data = data.dropna()

data.describe()

data['source'].value_counts()

import matplotlib.pyplot as plt

data['interest_rate'].plot(kind="box")
plt.show()

data['unpaid_principal_bal'].plot(kind="box")
plt.show()

data['unpaid_principal_bal'].describe().round()

data[data['unpaid_principal_bal'] > 1000000].index

data = data.drop(84135)

data['loan_to_value'].plot(kind="box")

data[data['loan_to_value'] < 7]

data['debt_to_income_ratio'].describe()

data['borrower_credit_score'].describe()

data['borrower_credit_score'].plot(kind = "box")

data.columns

repay_cols = ['m1',
       'm2', 'm3', 'm4', 'm5', 'm6', 'm7', 'm8', 'm9', 'm10', 'm11', 'm12']

zero_credit_index = data[data['borrower_credit_score'] < 400][repay_cols].index

data = data.drop(zero_credit_index)

data.shape

data['loan_purpose'].value_counts(normalize = True) * 100

data.columns

req_cols = ['source', 'financial_institution', 'interest_rate',
       'unpaid_principal_bal', 'loan_term', 'loan_to_value', 'number_of_borrowers',
       'debt_to_income_ratio', 'borrower_credit_score', 'loan_purpose',
       'insurance_percent', 'co-borrower_credit_score', 'insurance_type', 'm1',
       'm2', 'm3', 'm4', 'm5', 'm6', 'm7', 'm8', 'm9', 'm10', 'm11', 'm12']

x = data[req_cols]

y = data['m13']

y.value_counts(normalize = True) * 100

y.value_counts(normalize = True) * 100

x.columns

x.shape

x = pd.get_dummies(x)

x.info()

x.describe()

x

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x,y,
                                                    test_size=0.2,random_state=32 )

from sklearn.tree import DecisionTreeClassifier

dt = DecisionTreeClassifier()

dt.fit(x_train, y_train)

y_pred = dt.predict(x_test)

from sklearn.metrics import accuracy_score, confusion_matrix

acc = accuracy_score(y_test, y_pred)

print(acc)

confusion_matrix(y_test, y_pred)

from sklearn.ensemble import BaggingClassifier

dt = DecisionTreeClassifier()

bg = BaggingClassifier(estimator = dt, n_estimators= 50)

bg.fit(x_train, y_train)

y_pred = bg.predict(x_test)

confusion_matrix(y_test, y_pred)

accuracy_score(y_test, y_pred)

from sklearn.model_selection import cross_val_score

cross_results = cross_val_score(bg, x, y, cv = 5)

cross_results

cross_results.mean()

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators = 150, max_depth = 8, max_features = 0.8)

rf.fit(x_train, y_train)

y_pred = rf.predict(x_test)

acc = accuracy_score(y_test, y_pred)

print(acc)

